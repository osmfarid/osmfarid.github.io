---
import Hr from "./Hr.astro";
import Socials from "./Socials.astro";

const currentYear = new Date().getFullYear();

export interface Props {
  noMarginTop?: boolean;
}

const { noMarginTop = false } = Astro.props;
---

<footer class={`${noMarginTop ? "" : "mt-auto"}`}>
  <Hr noPadding />
  <div class="footer-wrapper">
    <Socials centered />
    <div class="copyright-wrapper">
      <span>Copyright &#169; {currentYear}</span>
      <span class="separator">&nbsp;|&nbsp;</span>
      <span>All rights reserved.</span>
    </div>
  </div>
</footer>

<style>
  footer {
    @apply w-full;
  }
  .footer-wrapper {
    @apply flex flex-col items-center justify-between py-6 sm:flex-row-reverse sm:py-4;
  }
  .link-button {
    @apply my-1 p-2 hover:rotate-6;
  }
  .link-button svg {
    @apply scale-125;
  }
  .copyright-wrapper {
    @apply my-2 flex flex-col items-center whitespace-nowrap sm:flex-row;
  }
  .separator {
    @apply hidden sm:inline;
  }
</style>
<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const primaryColorScheme = ""; // "light" | "dark"

    // Get theme data from local storage
    const currentTheme = localStorage.getItem("theme");

    function getPreferTheme() {
      // return theme value in local storage if it is set
      if (currentTheme) return currentTheme;

      // return primary color scheme if it is set
      if (primaryColorScheme) return primaryColorScheme;

      // return user device's prefer color scheme
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    let themeValue = getPreferTheme();

    function setPreference() {
      localStorage.setItem("theme", themeValue);
      reflectPreference();
    }

    function reflectPreference() {
      document.firstElementChild.setAttribute("data-theme", themeValue);

      document
        .querySelector("#theme-btn")
        ?.setAttribute("aria-label", themeValue);

      // Get a reference to the body element
      const body = document.body;

      // Check if the body element exists before using getComputedStyle
      if (body) {
        // Get the computed styles for the body element
        const computedStyles = window.getComputedStyle(body);

        // Get the background color property
        const bgColor = computedStyles.backgroundColor;

        // Set the background color in <meta theme-color ... />
        document
          .querySelector("meta[name='theme-color']")
          ?.setAttribute("content", bgColor);
      }
    }

    // set early so no page flashes / CSS is made aware
    reflectPreference();

    function setThemeFeature() {
      // set on load so screen readers can get the latest value on the button
      reflectPreference();

      // now this script can find and listen for clicks on the control
      document.querySelector("#theme-btn")?.addEventListener("click", () => {
        themeValue = themeValue === "light" ? "dark" : "light";
        setPreference();
      });
    }

    setThemeFeature();

    // // Use astro:page-load event
    // document.addEventListener("astro:page-load", () => {
    //   // Runs on view transitions navigation
      
    // });

    // sync with system changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", ({ matches: isDark }) => {
        themeValue = isDark ? "dark" : "light";
        setPreference();
      });
  });
</script>
<!-- <script>
  function setThemeFeature() {
  // set on load so screen readers can get the latest value on the button
  // reflectPreference();

  // now this script can find and listen for clicks on the control
  document.querySelector("#theme-btn")?.addEventListener("click", () => {
    themeValue = themeValue === "light" ? "dark" : "light";
    setPreference();
  });
  }
  document.addEventListener("astro:after-swap", setThemeFeature);
</script> -->
